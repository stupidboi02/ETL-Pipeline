version: '3'

x-airflow-common: &airflow-common
  image: chickengang/airflow
  build:
    context: ./airflow
    dockerfile: dockerfile
  environment: &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__SCHEDULER__MIN_FILE_PROCESS_INTERVAL: 10
  volumes:
    - ./airflow/dags:/opt/airflow/dags
    - airflow_logs:/opt/airflow/logs
    - airflow_plugins:/opt/airflow/plugins
    - airflow_scripts:/opt/airflow/scripts
    - ./spark:/opt/airflow/code
  user: "${AIRFLOW_UID:-50000}:${AIRFLOW_GID:-50000}"
  depends_on:
    postgres:
      condition: service_healthy
  networks:
    big_data:

services:
  # Airflow cluster
  airflow-webserver:
    <<: *airflow-common
    container_name: airflow-webserver
    ports:
      - 8080:8080
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 10s
      timeout: 10s
      retries: 5
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    restart: always
    command: airflow webserver

  airflow-scheduler:
    <<: *airflow-common
    container_name: airflow-scheduler
    restart: always
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    command: scheduler

  airflow-init:
    <<: *airflow-common
    container_name: airflow-init
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
    command: db migrate

  postgres:
    image: postgres
    container_name: postgres
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "airflow" ]
      interval: 5s
      retries: 5
    restart: always
    networks:
      big_data:
    volumes:
      - postgres-volume:/var/lib/postgresql/data
  # HDFS cluster
  namenode:
    image: bde2020/hadoop-namenode:2.0.0-hadoop3.2.1-java8
    container_name: namenode
    ports:
      - 9870:9870
      - 9000:9000
    environment:
      - CLUSTER_NAME=test
    env_file:
      - ./hadoop.env
    restart: always
    networks:
      big_data:
    volumes:
      - hadoop_home:/home
      - hadoop_namenode:/hadoop/dfs/name

  datanode:
    image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
    container_name: datanode
    environment:
      SERVICE_PRECONDITION: "namenode:9870"
    env_file:
      - ./hadoop.env
    restart: always
    networks:
      big_data:
    volumes:
      - hadoop_datanode:/hadoop/dfs/data

  datanode2:
    image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
    container_name: datanode2
    environment:
      SERVICE_PRECONDITION: "namenode:9870"
    env_file:
      - ./hadoop.env
    restart: always
    networks:
      big_data:
    volumes:
      - hadoop_datanode2:/hadoop/dfs/data

  #spark cluster
  spark-master:
    image: spark-final
    container_name: spark-master
    hostname: spark-master
    depends_on:
      - namenode
      - datanode
    ports:
      - "9090:8080"
      - "7077:7077"
    environment:
      - INIT_DAEMON_STEP=setup_spark
      - CORE_CONF_fs_defaultFS=hdfs://namenode:9000
      - SPARK_MASTER_HOST=spark-master
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    networks:
      - big_data
    volumes:
      - ./spark:/opt/airflow/code

  spark-worker-a:
    image: spark-final
    container_name: spark-worker-a
    depends_on:
      - spark-master
    ports:
      - "9091:8080"
      - "7000:7000"
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER=spark://spark-master:7077
      - CORE_CONF_fs_defaultFS=hdfs://namenode:9000
      - SPARK_WORKLOAD=worker
      - SPARK_LOCAL_IP=spark-worker-a
      - SPARK_WORKER_CORES=1
      - SPARK_WORKER_MEMORY=1G
      - SPARK_DRIVER_MEMORY=1G
      - SPARK_EXECUTOR_MEMORY=1G
    networks:
      - big_data
    volumes:
      - ./spark:/opt/airflow/code

  spark-worker-b:
    image: spark-final
    container_name: spark-worker-b
    depends_on:
      - spark-master
    ports:
      - "9092:8080"
      - "7001:7000"
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER=spark://spark-master:7077
      - CORE_CONF_fs_defaultFS=hdfs://namenode:9000
      - SPARK_WORKLOAD=worker
      - SPARK_LOCAL_IP=spark-worker-b
      - SPARK_WORKER_CORES=1
      - SPARK_WORKER_MEMORY=1G
      - SPARK_DRIVER_MEMORY=1G
      - SPARK_EXECUTOR_MEMORY=1G
    networks:
      - big_data
    volumes:
      - ./spark:/opt/airflow/code

  # Other

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
    volumes:
      - pgadmin:/var/lib/pgadmin
    ports:
      - "5050:80"
    networks:
      - big_data

  app-warehouse:
    image: postgres
    container_name: data-warehouse
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=admin
      - POSTGRES_DB=datawarehouse
    ports:
      - 5432:5432
    networks:
      big_data:
    volumes:
      - data-warehouse:/var/lib/postgresql/data

  #visualization
  # superset:
  #   build:
  #     context: ./superset
  #     dockerfile: dockerfile
  #   container_name: superset
  #   environment:
  #     - ADMIN_USERNAME=admin
  #     - ADMIN_EMAIL=admin@admin.com
  #     - ADMIN_PASSWORD=admin
  #   ports:
  #     - '8088:8088'
  #   networks:
  #     - big_data
  #   volumes:
  #     - superset_data:/app/superset_home

networks:
  big_data:


volumes:
  postgres-volume:
  airflow_logs:
  airflow_plugins:
  airflow_scripts:
  hadoop_home:
  hadoop_namenode:
  hadoop_datanode:
  hadoop_datanode2:
  data-warehouse:
  superset_data:
  pgadmin:
